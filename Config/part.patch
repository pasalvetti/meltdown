@use "builtin:debug";

/** Get the electric charge rate from a list **/
@function get-ec-rate($resource-list, $part-name: "none") {
    @each $resource in $resource-list {
        @if $resource[ResourceName] == ElectricCharge {
            @return $resource[Rate];
        }
    }
    $log: debug-log("No ec rate found in the resource list for #{$part-name}");
    @return 0;
}

:parts {
// add Module_Thermal to all generators generating electric charge
    .Module_Generator:[
        $rate: $$ResourceSetting[Rate];
        $ResourceName: $$ResourceSetting[ResourceName];
    ] {
        @if ($rate > 0 and $ResourceName == ElectricCharge) {
            +Module_Thermal {
                +Data_Thermal {
                    //$log: debug-log("Meltdown FluxGenerated=10*#{$rate}");
                    FluxGenerated: 10 * $rate;
                }
            }
        }
    }
// add Module_Thermal to all resource converters generating electric charge
    .Module_ResourceConverter:[
        $rate: 0;
        @each $definition in $$FormulaDefinitions {
            $rate+: get-ec-rate($definition[OutputResources], "Module_ResourceConverter");
        }
    ] {
        @if ($rate > 0) {
            +Module_Thermal {
                +Data_Thermal {
                    //$log: debug-log("Meltdown FluxGenerated=10*#{$rate}");
                    FluxGenerated: 10 * $rate;
                }
            }
        }
    }
// add Module_Thermal to all solar panels
    .Module_SolarPanel:[
        $rate: $$ResourceSettings[Rate];
    ] {
        @if ($rate > 0) {
            +Module_Thermal {
                +Data_Thermal {
                    //$log: debug-log("Meltdown FluxGenerated=10*#{$rate}");
                    FluxGenerated: 10 * $rate;
                }
            }
        }
    }
// add Module_ActiveRadiator_MeltdownPlugin to all active radiators
    .Module_ActiveRadiator :[
        $fluxRemoved: $$fluxRemoved;
        $log: debug-log("Meltdown fluxRemoved=#{$fluxRemoved}");
        $requiredResources: $$requiredResources;
    ] {
        +Module_ActiveRadiator_MeltdownPlugin {
            +Data_ActiveRadiator_MeltdownPlugin {
                $log: debug-log("Meltdown fluxRemoved=#{$fluxRemoved}");
                FluxRemoved: $fluxRemoved;
                RequiredResources: $requiredResources;
            }
        }
    }
}

// add EC consumption to all crewed command pods based on their crew capacity
:parts {
    @if $$crewCapacity > 0 {
        $crewCapacity: $$crewCapacity;
        * > Module_Command > Data_Command {
            requiredResources +: [
                {
                    Rate: 0.5 * $crewCapacity,
                    ResourceName: "ElectricCharge",
                    AcceptanceThreshold: 1.0
                }
            ];
        }
    }
}

// all command pods generate heat based on their EC consumption + add Module_Thermal to all command
:parts .Module_Command:[
  $rate: get-ec-rate($$requiredResources, "Module_Command");
] {
    +Module_Thermal {
        +Data_Thermal {
            FluxGenerated: 10 * $rate;
        }
    }
}

// add the PAM header for all thermal modules
:parts .Module_Thermal {
    PAMModuleVisualsOverride +: [
        {
            PartComponentModuleName: "PartComponentModule_Thermal",
            ModuleDisplayName: "PartModules/Thermal/Name",
            ShowHeader: true,
            ShowFooter: true
        }
    ];
}