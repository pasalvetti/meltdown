@use "builtin:debug";

:parts {
// add Module_Thermal to all generators and resource converters
    .Module_Generator, .Module_ResourceConverter {
        +Module_Thermal {
            +Data_Thermal {}
        }
    }
// add the PAM header for command pods
    .Module_Command {
        PAMModuleVisualsOverride +: [
            {
                PartComponentModuleName: "PartComponentModule_Thermal",
                ModuleDisplayName: "PartModules/Thermal/Name",
                ShowHeader: true,
                ShowFooter: true
            }
        ];
    }
}

// add EC consumption to all crewed command pods based on their crew capacity
:parts {
    @if $$crewCapacity > 0 {
        $crewCapacity: $$crewCapacity;
        * > Module_Command > Data_Command {
            requiredResources +: [
                {
                    Rate: $crewCapacity,
                    ResourceName: "ElectricCharge",
                    AcceptanceThreshold: 1.0
                }
            ];
        }
    }
}

// all command pods generate heat based on their EC consumption
@function get-ec-rate($resource-list, $part-name: "none") {
  @each $resource in $resource-list {
    @if $resource[ResourceName] == ElectricCharge {
      @return $resource[Rate];
    }
  }
  $log: debug-log("No ec rate found in the resource list for #{$part-name}");
  @return 0;
}

:parts .Module_Command:[
  $rate: get-ec-rate($$requiredResources, "Module_Command");
] {
    +Module_Thermal {
        +Data_Thermal {
            FluxGenerated: 10 * $rate;
        }
    }
}